#!usr/bin/python3
import datetime
import time
import hashlib
import string
import os
import random
import requests
import re
import bs4


from flask import Flask, request
import peewee as pw
import telebot

from database import KarmaUser, Limitation
from telebot import types
import config


TELEGRAM_API = os.environ["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_API)

saves_database = {}
database="crocodila"
database_vopros="victorina"
database_id=0
message_id_del="111111"
message_id_del2="2"
database_time="3333"
change_croco_2=2
database_id_mute=2
database_id_time=0

def is_my_message(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫–æ–º—É –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
	"""
	if msg.chat.type == "private":
		return
	text = msg.text.split()[0].split("@")
	if len(text) > 1:
		if text[1] != config.bot_name:
			return False
	return True
	
def reply_exist(msg):
	return msg.reply_to_message

@bot.message_handler(commands=["start"], func=is_my_message)
def start(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""
	reply_text = (
			"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ " +
			" –ø–æ–¥—Å—á–µ—Ç –∫–∞—Ä–º—ã –≤ —á–∞—Ç–µ @khvchat.")
	bot.send_message(msg.chat.id, reply_text)

@bot.message_handler(commands=["h","help"], func=is_my_message)
def helps(msg):
	help_mess = "<b>–•–∞–±–ß–∞—Ç</b> - —á–∞—Ç –≥–æ—Ä–æ–¥–∞ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞.\
	\n\n‚ÑπÔ∏è –í—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ö–≤–∞–ª—ã –∏ –æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ –ø–æ–≤—ã—à–∞—é—Ç –∫–∞—Ä–º—É, —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–Ω–∏–∂–∞—é—Ç.\
	\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\
	\n/h - –°–ø—Ä–∞–≤–∫–∞\
	\n/weather - –ü–æ–≥–æ–¥–∞\
	\n/news - –ù–æ–≤–æ—Å—Ç–∏\
	\n/croco - –ò–≥—Ä–∞ –≤ –ö—Ä–æ–∫–æ–¥–∏–ª\
	\n/slovo - –ò–≥—Ä–∞ –≤ –°–ª–æ–≤–∞\
	\n/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\
	\n/report - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É\
	\n\n/–ø—Ä–∏–≤–µ—Ç /—É—Ç—Ä–∞ /—Ü–∏—Ç–∞—Ç–∞ /–¥–∞—Ç–∞ /–≥–æ—Ä–æ—Å–∫–æ–ø /–∫–æ—Ç /—à—É—Ç–∫–∞ /? /–∫ /–ø–∏ /—Ñ—Å–± /—Ñ–æ—Ç–æ /–±–∞–Ω - –û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\
	\n\n<b>–ö–∞—Ä–º–∞:</b>\
	\n/my - –°–≤–æ—è –∫–∞—Ä–º–∞\
	\n/top - –¢–æ–ø —á–∞—Ç–∞\
	\n/gift - –ü–æ–¥–∞—Ä–∏—Ç—å üéÅüåπ‚ù§\
	\n/mine - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä–º—É\
	\n/z - –ó–∞–º–æ—Ä–æ–∑–∫–∞ ü•∂\
	\n/f - –†–∞–∑–º–æ—Ä–æ–∑–∫–∞\
	\n/b - –ë–µ–∑–ª–∏–º–∏—Ç üòé\
	\n<b>/—Ç–∏–Ω–¥–µ—Ä</b> - –ù–∞–π—Ç–∏ –ø–∞—Ä—É\
	\n<b>/–ª–∏–º–∏—Ç</b> - –°–Ω—è—Ç—å –ª–∏–º–∏—Ç\
	\nüî´üî™ü™ì‚öîÔ∏èüèπ üß®üí£ - –î—É—ç–ª—å\
	\nü•ä - –°—É–ø–µ—Ä —É–¥–∞—Ä\
	\nü¶æ - –£–¥–∞—Ä –•–∞–ª–∫–∞\
	\n‚ò† - –°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä\
	\nüé≤üé∞üèÄüé≥‚öΩÔ∏è - –†–∞–Ω–¥–æ–º"
	
	bot.send_message(msg.chat.id, help_mess, parse_mode="HTML")


@bot.message_handler(commands=["weather","–ø–æ–≥–æ–¥–∞"], func=is_my_message)
def weather(msg):
	a = datetime.datetime.today()
	bot.reply_to(msg, f"<a href='https://khabara.ru/weather.html?{a}'>üå°</a>", parse_mode="HTML")
	Limitation.delete().where(Limitation.chatid == msg.chat.id).execute()

@bot.message_handler(commands=["news"], func=is_my_message)
def news_khv(msg):
	a = datetime.datetime.today()
	bot.reply_to(msg, f"<a href='https://khabara.ru/rss.html?{a}'>üì∞</a>", parse_mode="HTML")

@bot.message_handler(commands=["tg"], func=is_my_message)
def tg_group(msg):
	bot.forward_message(msg.chat.id, -1001119365436, 6203)

@bot.message_handler(commands=["report"], func=is_my_message)
def report(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –∂–∞–ª–æ–± –∞–¥–º–∏–Ω–∞–º
	"""    
	report_text = f"<a href='tg://user?id=55910350'>‚ö†</a>Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç <b>{msg.from_user.first_name}</b> –ø–æ–ª—É—á–µ–Ω–∞ + –≤ –∫–∞—Ä–º—É<a href='tg://user?id=34817120'>.</a><a href='tg://user?id=73762291'>.</a>"
	bot.reply_to(msg, report_text, parse_mode="HTML")
	bot.delete_message(msg.chat.id, msg.message_id)

@bot.message_handler(commands=["no"], func=is_my_message)
def nos(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞
	"""
	nos_text = "‚ÑπÔ∏è –ó–¥–µ—Å—å –ß–∞—Ç –æ–±—â–µ–Ω–∏—è, –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥—Ä—É–ø–ø–∞–º–∏: @market27 –∏–ª–∏ @khvjob"
	user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
	if msg.reply_to_message:
		bot.reply_to(msg.reply_to_message,nos_text)
		if user.status == 'administrator' or user.status == 'creator':
			bot.delete_message(msg.chat.id, msg.reply_to_message.message_id)
	else:
		bot.reply_to(msg,nos_text)
	bot.delete_message(msg.chat.id, msg.message_id)
	
def duel(msg):
	if is_karma_abuse(msg):
		return
	if is_karma_freezed(msg):
		return
	if msg.from_user.id == msg.reply_to_message.from_user.id:
		bot.reply_to(msg, "‚ö∞Ô∏è —Å–∞–º–æ–ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–ª—Å—è")
		change_karma(msg.from_user, msg.chat, -15)
		return
	if msg.reply_to_message.from_user.is_bot:
		change_karma(msg.from_user, msg.chat, -15)
		return
	user = select_user(msg.from_user, msg.chat)

	if user.is_freezed!=None:
		zamorozka(msg)
	user2 = select_user(msg.reply_to_message.from_user, msg.chat)
	n=10
	try:
		s=msg.text.count("üí£")
		q=msg.text.count("üß®")
		n=10+(s+q)
	except:
		print("error")

	if user.karma > n and user2.karma > n:
		otvet=f"üí• –î—É—ç–ª—å!"
	else:
		bot.reply_to(msg, f"‚ö∞ –¢–æ, —á—Ç–æ –º–µ—Ä—Ç–≤–æ, —É–º–µ—Ä–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç! –ú–∞–ª–æ –∫–∞—Ä–º—ã.", parse_mode="HTML")
		return
	random.seed(msg.message_id)
	if msg.text=='ü•ä' and user.karma > 100 and user2.karma > 100:
		otvet=f"‚ö°Ô∏è –°—É–ø–µ—Ä —É–¥–∞—Ä!"
		n=random.randint(10, 100)
		
	if msg.text=='ü¶æ' and user.karma > 300 and user2.karma > 300:
		otvet=f"‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è –£–¥–∞—Ä –•–∞–ª–∫–∞!"
		n=random.randint(100, 300)
		
	if msg.text=='‚ò†Ô∏è'and msg.reply_to_message.text =='‚ò†Ô∏è' and user.karma > 1000 and user2.karma > 1000:
		otvet=f"üíÄ –°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä!"
		n=random.randint(300, 1000)
		
	x=random.randint(1,3)
	if x==1:
		otvetx=f"<b>{msg.from_user.first_name}</b> (+{n}) —É–±–∏–ª <b>{msg.reply_to_message.from_user.first_name}</b> (-{n})"
		change_karma(msg.from_user, msg.chat, n)
		change_karma(msg.reply_to_message.from_user, msg.chat, -n)
	if x==2:
		otvetx=f"<b>{msg.reply_to_message.from_user.first_name}</b> (+{n}) —É–±–∏–ª <b>{msg.from_user.first_name}</b> (-{n})"
		change_karma(msg.reply_to_message.from_user, msg.chat, n) 
		change_karma(msg.from_user, msg.chat, -n)
	if x==3:
		otvetx=f"<b>{msg.from_user.first_name}</b> vs <b>{msg.reply_to_message.from_user.first_name}</b> - –ø—Ä–æ–º–∞–∑–∞–ª!"
		change_karma(msg.from_user, msg.chat, -10)
		
	bot.reply_to(msg, f"{otvet}\n{otvetx}", parse_mode="HTML")
				
def select_user(user, chat):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	:param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã
	:param chat: —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

	TODO –•–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	"""
	selected_user = KarmaUser.select().where(
		(KarmaUser.chatid == chat.id) &
		(KarmaUser.userid == user.id))

	if not selected_user:
		insert_user(user, chat)
		
	selected_user = KarmaUser.select().where(
		(KarmaUser.userid == user.id) &
		(KarmaUser.chatid == chat.id)).get()
	return selected_user


def insert_user(user, chat):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:param user: –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:param chat: —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

	TODO –•–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	"""
	# 'user_name' —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏. –ù–æ —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–∞–∑–Ω–æ–º—É
	# –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —ç—Ç–∏—Ö –ø–æ–ª–µ–π –∏ –º–æ–≥—É—Ç –Ω–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é.
	# –ê –µ—Å–ª–∏ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∏–º
	# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'None', –∞ –Ω–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –° 'user_nick' —Ç–∞ –∂–µ —Å–∏—Ç—É–∞—Ü–∏—è.
	user_name = (user.first_name or "") + " " + (user.last_name or "")
	user_nick = user.username or ""

	new_user = KarmaUser.create(
				userid=user.id,
				chatid=chat.id,
				karma=0,
				user_count=0,
				user_name=user_name,
				user_nick=user_nick,
				is_freezed=False)
	new_user.save()


def change_karma(user, chat, result):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä–º—É
	:param chat: —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	:param result: –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä–º—É
	"""
	selected_user = KarmaUser.select().where(
		(KarmaUser.chatid == chat.id) &
		(KarmaUser.userid == user.id))

	if not selected_user:
		insert_user(user, chat)

	# 'user_name' —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏. –ù–æ —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–∞–∑–Ω–æ–º—É
	# –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —ç—Ç–∏—Ö –ø–æ–ª–µ–π –∏ –º–æ–≥—É—Ç –Ω–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é.
	# –ê –µ—Å–ª–∏ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∏–º
	# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'None', –∞ –Ω–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –° 'user_nick' —Ç–∞ –∂–µ —Å–∏—Ç—É–∞—Ü–∏—è.
	user_name = (user.first_name or "") + " " + (user.last_name or "")
	user_nick = user.username or ""

	update_user = KarmaUser.update(
							karma=(KarmaUser.karma + result),
							user_count=(KarmaUser.user_count + 1),
							user_name=user_name,
							user_nick=user_nick
						).where(
							(KarmaUser.userid == user.id) &
							(KarmaUser.chatid == chat.id))
	update_user.execute()

def users_karma(userkarma):
	dictionary = {1 : "üë§\n      –ù–∏–∫—Ç–æ", 2 : "üêõ\n      –õ–∏—á–∏–Ω–∫–∞", 3 : "üëæ\n      –ì–æ—Å—Ç—å", 4 : "ü§´\n      –¢–∏—Ö–æ–Ω—è", 5 : "üê§\n      –ü—Ä–æ—Ö–æ–∂–∏–π", 6 : "üéó\n      –ù–æ–≤–∏—á–æ–∫", 7 : "üî±\n      –õ—é–±–æ–ø—ã—Ç–Ω—ã–π", 8 : "‚öúÔ∏è\n      –°—Ç—Ä–∞–Ω–Ω–∏–∫", 9 : "‚ú®\n      –ë—ã–≤–∞–ª—ã–π", 10 : "ü•â\n      –ü–æ—Å—Ç–æ—è–ª–µ—Ü", 11 : "ü•à\n      –ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π", 12 : "ü•á\n      –ú–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å", 13 : "üéñ\n      –ì–æ—Ä–æ–¥–æ–≤–æ–π", 14 : "üèÖ\n      –•–∞–±–∞—Ä–æ–≤—á–∞–Ω–∏–Ω", 15 : "‚≠êÔ∏è\n      –•–∞–±–ê–∫—Ç–∏–≤–∏—Å—Ç", 16 : "üåü\n      –î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∏–∫", 17 : "üèµ\n      –°—Ç–∞—Ä–æ–∂–∏–ª", 18 : "üí´\n      –°—Ç–∞–ª–∫–µ—Ä", 19 : "üí•\n      –í–µ—Ç–µ—Ä–∞–Ω", 20 : "üé≠\n      –§–∏–ª–æ—Å–æ—Ñ", 21 : "üéì\n      –ú—ã—Å–ª–∏—Ç–µ–ª—å", 22 : "üõ†\n      –ú–∞—Å—Ç–µ—Ä", 23 : "‚òÄÔ∏è\n      –°–ø–µ—Ü", 24 : "üîÆ\n      –û—Ä–∞–∫—É–ª", 25 : "üóΩ\n      –õ–µ–≥–µ–Ω–¥–∞", 26 : "üèÜ\n      –ì—É—Ä—É", 27 : "üëë\n      –≠–ª–∏—Ç–∞", 28 : "üß†\n      –ú—É–¥—Ä–µ—Ü", 29 : "üëÅ\n      –°–º–æ—Ç—Ä–∏—Ç–µ–ª—å", 30 : "üèπ\n      –í–æ–∂–¥—å", 31 : "üßò\n      –î–∑—ç–Ω", 32 : "‚úùÔ∏è\n      –ë–æ–≥", 33 : "‚ö°Ô∏è\n      –í–µ—Ä—Ö–æ–≤–Ω—ã–π –ë–æ–≥", 34 : "‚ö°‚ö°Ô∏èÔ∏èÔ∏è\n      –ü–∞–Ω—Ç–µ–æ–Ω", 35: "ü¶æ\n      –°–ª–æ–º–∞–ª —Å–∏—Å—Ç–µ–º—É"}
	user_rang="ü§ñ\n      –ë–æ—Ç"
	level=0
	for level, rang in dictionary.items(): 
		if userkarma >= level**3*10:
			user_rang=rang
			user_level=level
	return user_rang, user_level
	
@bot.message_handler(commands=["my","–∫–∞—Ä–º–∞"], func=is_my_message)
def my_karma(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	–í—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞—Ä–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""

	user = select_user(msg.from_user, msg.chat)
	
	frez=""
	if user.is_freezed:
		frez=" ü•∂"
	if user.is_freezed==None:
		frez=" üòé"

	if user.user_name:
		name = user.user_name.strip()
	else:
		name = user.user_nick.strip()
	userkarma=user.karma+user.user_count
	
	
	hours_ago_12 = pw.SQL(f"current_timestamp-interval'{random.randint(10, 120)} minutes'")
	limitation_request = Limitation.select().where(
		(Limitation.timer > hours_ago_12) &
		(Limitation.userid == msg.from_user.id) &
		(Limitation.chatid == msg.chat.id))
	timer = "-"

	if len(limitation_request) > 1:
		timer = limitation_request[0].timer + datetime.timedelta(hours=12)
		timer = timer.strftime("%H:%M")
	x,y = users_karma(userkarma)
	now_karma = f"‚ÑπÔ∏è <b>{name}</b>\n–°–æ–æ–±—â–µ–Ω–∏–π: {user.user_count}\n–ö–∞—Ä–º–∞: {user.karma}{frez}\n–õ–∏–º–∏—Ç: {timer}\n–†–∞–Ω–≥: {y} {x}"
	bot.reply_to(msg, now_karma, parse_mode="HTML")
    
@bot.message_handler(commands=["top","—Ç–æ–ø"], func=is_my_message)
def top_best(msg):
	
	"""
	–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–π–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–∞—Ä–º—ã
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""

	if len(msg.text.split()) == 1:
		result=10
	else:
		result = int(msg.text.split()[1])	
	selected_user = KarmaUser.select()\
		.where(((KarmaUser.user_count+ KarmaUser.karma) > 0) & (KarmaUser.chatid == msg.chat.id))\
		.order_by((KarmaUser.user_count+KarmaUser.karma).desc())\
		.limit(result)
	user_rang = "ü§ñ –ë–æ—Ç"
	top_mess = "üìà –¢–æ–ø –•–∞–±–ß–∞—Ç–∞\n\n"
	for i, user in enumerate(selected_user):
		if user.user_name:
			name = user.user_name.strip()
		else:
			name = user.user_nick.strip()
		try:

			userstatus = bot.get_chat_member(msg.chat.id,user.userid)
			if userstatus.status == 'creator' or userstatus.status == 'member' or userstatus.status == 'administrator' or userstatus.status != 'left' or userstatus.status != 'kicked' or userstatus.status != 'restricted':
				userkarma=user.karma+user.user_count
				user_rang,y=users_karma(userkarma)
				if userstatus.status == 'left' or userstatus.status == 'kicked':
					user_rang = "üíÄÔ∏èÔ∏èÔ∏è\n      –í—ã–±—ã–ª"
					update_user = KarmaUser.update(
							karma=(0),
							user_count=KarmaUser.user_count,
							user_name=user.user_name.strip(),
							user_nick=user.user_nick.strip()
						).where(
							(KarmaUser.userid == user.userid) &
							(KarmaUser.chatid == msg.chat.id))
					update_user.execute()

				frez=""
				if user.is_freezed:
					frez=" ü•∂"
				if user.is_freezed==None:
					frez=" üòé"

				top_mess += f"{i+1}. <b>{name}</b>{frez} ({user.user_count}) {user_rang} ({user.karma})\n"
		except Exception:
				top_mess += f"{i+1}. <b>{name}</b> ({user.user_count}) üóë\n      –£–¥–∞–ª–µ–Ω–Ω—ã–π\n"
				update_user = KarmaUser.update(
							karma=(0),
							user_count=KarmaUser.user_count,
							user_name=user.user_name.strip(),
							user_nick=user.user_nick.strip()
						).where(
							(KarmaUser.userid == user.userid) &
							(KarmaUser.chatid == msg.chat.id))
				update_user.execute()

	if not selected_user:
		top_mess = "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞—Å–ª—É–∂–∏–ª –±—ã—Ç—å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ."
	bot.send_message(msg.chat.id, top_mess, parse_mode="HTML")
	
	
@bot.message_handler(commands=["tinder", "—Ç–∏–Ω–¥–µ—Ä"], func=is_my_message)
def tinder(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–∞—Ä—É –¥–Ω—è
	""" 
	if is_game_abuse(msg):
		return
	user = select_user(msg.from_user, msg.chat)

	if user.is_freezed!=None:
		zamorozka(msg)
		
	if user.is_freezed:
		bot.reply_to(msg, f"–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!", parse_mode="HTML")
		return

	else:
		if user.karma > 100:
			random.seed(msg.message_id)
			user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
			if user.status == 'creator':
				change_karma(msg.from_user, msg.chat, +5)
			else:
				change_karma(msg.from_user, msg.chat, -30)

			selected_user = KarmaUser.select()\
				.where((KarmaUser.karma > 100) & (KarmaUser.chatid == msg.chat.id))\
				.order_by(KarmaUser.karma.desc())\
				.limit(200)
			top_mess = f"ü§ö"
			selected_user = random.choices(selected_user)
			for i, user in enumerate(selected_user):
			
				if user.is_freezed:
					top_mess +=  f"–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è‚úä"
				else:
					nick = user.user_nick.strip()
					name = user.user_name.strip()
					userid = user.userid
					gender = ''
					if name.endswith('–∞') or name.endswith('—è') or name.endswith('a'):
						
						gender = f'–¥–µ–≤—É—à–∫–æ–π'
					else:
						gender = f'–ø–∞—Ä–Ω–µ–º'
					if msg.from_user.id == userid:
						gender = '—Å–∞–º–∏–º —Å–æ–±–æ–π'
					try:
						userstatus = bot.get_chat_member(msg.chat.id,user.userid)
						if userstatus.status == 'creator' or userstatus.status == 'member' or userstatus.status == 'administrator':
							change_karma(userstatus.user, msg.chat, +2)
							top_mess = f"‚ù§Ô∏è –í—ã –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –ø–∞—Ä—É —Å {gender}!\n<a href='tg://user?id={msg.from_user.first_name}'>{msg.from_user.id}</a> ‚ûï <a href='tg://user?id={userid}'>{name}</a>Ô∏è"

						if userstatus.status == 'left' or userstatus.status == 'kicked':
							top_mess = f"üíÄÔ∏è –í—ã –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –ø–∞—Ä—É —Å —É—Å–æ–ø—à–∏–º <b>{name}</b>"
							update_user = KarmaUser.update(
							karma=(0),
							user_count=KarmaUser.user_count,
							user_name=user.user_name.strip(),
							user_nick=user.user_nick.strip()
							).where(
							(KarmaUser.userid == user.userid) &
							(KarmaUser.chatid == msg.chat.id))
							update_user.execute()
					except Exception:
						top_mess+= f"–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—èü§ö"
		else:
#			top_mess= f"–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä–º—ã –¥–ª—è –ª—é–±–≤–∏"
			bot.delete_message(msg.chat.id, msg.message_id)

	bot.reply_to(msg, top_mess, parse_mode="HTML")
	
@bot.message_handler(commands=["–∫"], func=is_my_message)
def krasava(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–∞—Ä—É –¥–Ω—è
	""" 
	if is_game_abuse(msg):
		return
	user = select_user(msg.from_user, msg.chat)
	
	if user.is_freezed!=None:
		zamorozka(msg)
		
	if user.is_freezed:
		bot.reply_to(msg, f"–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!", parse_mode="HTML")
		return

	else:
		if user.karma > 100:
			random.seed(msg.message_id)
			user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
			if user.status == 'creator':
				change_karma(msg.from_user, msg.chat, +100)
			else:
				change_karma(msg.from_user, msg.chat, -30)

			selected_user = KarmaUser.select()\
				.where((KarmaUser.karma > 100) & (KarmaUser.chatid == msg.chat.id))\
				.order_by(KarmaUser.karma.desc())\
				.limit(200)
			top_mess = f"ü•≤"
			selected_user = random.choices(selected_user)
			for i, user in enumerate(selected_user):
			
				if user.is_freezed:
					top_mess +=  f"ü•≤ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ö—Ä–∞—Å–∞–≤"
				else:
					nick = user.user_nick.strip()
					name = user.user_name.strip()

					try:
						userstatus = bot.get_chat_member(msg.chat.id,user.userid)
						if userstatus.status == 'creator' or userstatus.status == 'member' or userstatus.status == 'administrator':
							change_karma(userstatus.user, msg.chat, +2)
							top_mess = f"üéâüéâüéâ –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è <a href='tg://user?id={user.userid}'>{name}</a>."

						if userstatus.status == 'left' or userstatus.status == 'kicked':
							top_mess = f"üéâÔ∏è –ö—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫? <b>–•–∞–±–ß–∞—Ç!</b>"
							update_user = KarmaUser.update(
							karma=(0),
							user_count=KarmaUser.user_count,
							user_name=user.user_name.strip(),
							user_nick=user.user_nick.strip()
							).where(
							(KarmaUser.userid == user.userid) &
							(KarmaUser.chatid == msg.chat.id))
							update_user.execute()
					except Exception:
						top_mess+= f"ü•≤ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ö—Ä–∞—Å–∞–≤"
		else:
			top_mess+= f"–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä–º—ã"
			bot.delete_message(msg.chat.id, msg.message_id)

	bot.send_photo(msg.chat.id, f"https://telegra.ph/file/b2219190b996c55d8ef84.jpg", caption = top_mess, parse_mode="HTML")

	
@bot.message_handler(commands=["dellid"], func=is_my_message)
def dellid(msg):
	bot.delete_message(msg.chat.id, msg.message_id)
	if msg.from_user.id not in config.gods:
		return
	selected_user = KarmaUser.select() \
		.where((KarmaUser.karma <= 3000) & (KarmaUser.chatid == msg.chat.id)) \
		.order_by(KarmaUser.karma.asc()) \
		.limit(5000)
	for i, user in enumerate(selected_user):
		try:
			if i % 20 == 0:
				time.sleep(1)
			userstatus = bot.get_chat_member(msg.chat.id,user.userid)
			if userstatus.status == 'left' or userstatus.status == 'kicked' or userstatus.status != 'member':
				query = KarmaUser.delete().where((KarmaUser.userid == user.userid) & (KarmaUser.chatid == msg.chat.id))
				query.execute()
		except:
			continue
			


@bot.message_handler(commands=["b", "z", "f"], func=is_my_message)
def freeze_me(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä–º—ã.
	"""
	user = select_user(msg.from_user, msg.chat)

	s=""
	if msg.text[1:2] == "b":
		n=10000
		if user.karma < n:
			bot.reply_to(msg, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä–º—ã +10000")
			return
		freeze = None
		s="üòé –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –∏–≥—Ä—ã -10–∫"
	if msg.text[1:2] == "z":
		n=100
		if user.karma < n:
			bot.reply_to(msg, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä–º—ã +100")
			return
		freeze = True
		s="ü•∂ –∫–∞—Ä–º–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ -100"
	if msg.text[1:2] == "f":
		n=10
		freeze = False

	KarmaUser.update(is_freezed=freeze).where(
		(KarmaUser.userid == msg.from_user.id) &
		(KarmaUser.chatid == msg.chat.id)).execute()
	bot.reply_to(msg, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω {s}")
	user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
	if user.status == 'creator':
		change_karma(msg.from_user, msg.chat, +50)
	else:
		change_karma(msg.from_user, msg.chat, -n)


@bot.message_handler(commands=["god"], func=is_my_message)
def gods(msg):
	"""
	–ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ 
	–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º—É
	"""
	if len(msg.text.split()) == 1:
		return

	if msg.from_user.id not in config.gods:
		bot.reply_to(msg, "–¢—ã –Ω–µ –∏–º–µ–µ—à—å –≤–ª–∞—Å—Ç–∏.")
		return
	result = int(msg.text.split()[1])
	change_karma(msg.reply_to_message.from_user, msg.chat, result)
	bot.delete_message(msg.chat.id, msg.message_id)


@bot.message_handler(commands=["gift"], func=reply_exist)
def gift_karma(msg):
	if msg.reply_to_message.from_user.is_bot:
		return
	if is_karma_abuse(msg):
		return
	if is_karma_freezed(msg):
		bot.reply_to(msg, "–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –¥–∞—Ä–∏—Ç—å!")
		return

	if msg.from_user.id == msg.reply_to_message.from_user.id:
		return
	
	user = select_user(msg.from_user, msg.chat)
	
	if user.is_freezed!=None:
		zamorozka(msg)
	random.seed(msg.message_id)
	newkarma =10
	try:
		if len(msg.text.split()) > 1:
			new = int(msg.text.split()[1])
			newkarma = abs(new)
			
		q=msg.text.count('üåπ')
		if q>1:
			newkarma=10+q
			
		s=msg.text.count('‚ù§')
		if s>1:
			newkarma=10+s
		
		if msg.text== 'üéÅ':
			newkarma=random.randint(10, 100)
			
	except:
		print("error")
		
	if user.karma < newkarma:
		bot.reply_to(msg, "üéÅ –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä–º—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.")
		return
		
	otvet=""
	usera = bot.get_chat_member(msg.chat.id, msg.from_user.id)
	if usera.status == 'creator':
		change_karma(msg.reply_to_message.from_user, msg.chat, newkarma)
		otvet= f"üéÅ –í–∞–º –ø–æ–¥–∞—Ä–æ–∫ <b>+{newkarma}</b>"
	else:
		change_karma(msg.from_user, msg.chat, -newkarma)
		change_karma(msg.reply_to_message.from_user, msg.chat, newkarma) 
		otvet= f"üéÅ –í–∞–º –ø–æ–¥–∞—Ä–æ–∫ <b>+{newkarma}</b>"
			
	bot.reply_to(msg.reply_to_message, otvet, parse_mode="HTML")


@bot.message_handler(commands=["un"], func=is_my_message)
def un_mute(msg):
	"""
	–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω—è—Ç—å —Å 1-–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
	–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""
	if msg.from_user.id not in config.gods:
		return
	Limitation.delete().where(
		(Limitation.userid == msg.reply_to_message.from_user.id) &
		(Limitation.chatid == msg.chat.id)).execute()
	bot.send_message(msg.chat.id, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")

def is_karma_changing(text):
	result = []
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã –ø–æ —Å–º–∞–π–ª–∏–∫–∞–º
	if len(text) == 1:
		if text in config.good_emoji:
			result.append(1)
		if text in config.bad_emoji:
			result.append(-1)
		return result

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	text = text.lower()
	for punc in string.punctuation:
		text = text.replace(punc, "")
	for white in string.whitespace[1:]:
		text = text.replace(white, "")

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
	for word in config.good_words:
		if word == text \
				or (" "+word+" " in text) \
				or text.startswith(word) \
				or text.endswith(word):
			result.append(1)

	for word in config.bad_words:
		if word in text \
				or (" "+word+" " in text) \
				or text.startswith(word) \
				or text.endswith(word):
			result.append(-1)
		
			
	return result
	
def is_karma_changing_mat(text):
	result = []
		
	if len(text)==1:
		result.append(-1)
	else:
		result.append(0)

			# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	text = text.lower()
	for punc in string.punctuation:
		text = text.replace(punc, "")
	for white in string.whitespace[1:]:
		text = text.replace(white, "")
		
	for word in config.mat_words:
		if word in text \
				or (" "+word+" " in text) \
				or text.startswith(word) \
				or text.endswith(word):
			result.append(-15)
			
	if len(text.split()) > 2:
		for word in config.heppy_words:
			if word in text \
					or (" "+word+" " in text) \
					or text.startswith(word) \
					or text.endswith(word):
				result.append(5)
	return result

def is_karma_freezed(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä–º—ã.
	"""

	# –í—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑–∞–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
	banned_request = KarmaUser.select().where(
		(KarmaUser.chatid == msg.chat.id) &
		(
			(KarmaUser.userid == msg.from_user.id) |
			(KarmaUser.userid == msg.reply_to_message.from_user.id)
		)
	)
	# –£ –≤—ã–±—Ä–∞–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ—Ä–æ–∑–∫–∏
	for req in banned_request:
		if req.is_freezed:
			return True
	return False


def is_game_abuse(msg):
	hours_ago_12 = pw.SQL(f"current_timestamp-interval'{random.randint(10, 120)} minutes'")
	limitation_request = Limitation.select().where(
		(Limitation.timer > hours_ago_12) &
		(Limitation.userid == msg.from_user.id) &
		(Limitation.chatid == msg.chat.id))

	if len(limitation_request) > 1:
		bot.delete_message(msg.chat.id, msg.message_id)
		return True
	return False
	
def is_karma_abuse(msg):
	hours_ago_12 = pw.SQL(f"current_timestamp-interval'{random.randint(5, 60)} minutes'")
	limitation_request = Limitation.select().where(
		(Limitation.timer > hours_ago_12) &
		(Limitation.userid == msg.from_user.id) &
		(Limitation.chatid == msg.chat.id))

	if len(limitation_request) > 2:
		return True
	return False


@bot.message_handler(commands=["–±–∞–Ω"], func=reply_exist)
def zaBan(msg):
	if msg.chat.type == "private":
		return
	user = bot.get_chat_member(msg.chat.id, msg.reply_to_message.from_user.id)
	if user.status == 'administrator' or user.status == 'creator':
		return
	bot.send_message(msg.chat.id, f"<a href='tg://user?id=55910350'>üî´</a> <b>{msg.from_user.first_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–≥–Ω–∞—Ç—å <b>{msg.reply_to_message.from_user.first_name}</b> –∏–∑ –•–∞–±—á–∞—Ç–∞!", parse_mode="HTML")
	bot.send_poll(msg.chat.id, f'–°–æ–≥–ª–∞—Å–Ω—ã –≤—ã–≥–Ω–∞—Ç—å {msg.reply_to_message.from_user.first_name} –∏–∑ –ß–∞—Ç–∞?', ['–í—ã–≥–Ω–∞—Ç—å', '–ó–∞—Ç–∫–Ω—É—Ç—å', '–ü—Ä–æ—Å—Ç–∏—Ç—å'],is_anonymous=False)
	"""
	user = bot.get_chat_member(msg.chat.id, msg.reply_to_message.from_user.id)
	if user.status == 'administrator' or user.status == 'creator':
		return
	mutePoll=bot.send_poll(msg.chat.id, f'{msg.from_user.first_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞—Ç–∫–Ω—É—Ç—å {msg.reply_to_message.from_user.first_name}üî´ –≤ –•–∞–±—á–∞—Ç–µ, –°–æ–≥–ª–∞—Å–Ω—ã?', ['–ó–∞—Ç–∫–Ω—É—Ç—å', '–ü—Ä–æ—Å—Ç–∏—Ç—å'], False, close_date=int(round(time.time() + 500)))
	
	print(mutePoll.id)
	pollAnswers = [[],[]]
	pollVoteCount = 0
	@bot.poll_handler(func=lambda m: True)
	def voteCounter(votes):
		global pollVoteCount
		pollVoteCount = votes.total_voter_count
	@bot.poll_answer_handler(func=lambda m: True)
	def polls(count):
		global pollVoteCount
		if (len(count.option_ids) > 0):
			if (count.user.id not in pollAnswers[0]) and (count.user.id not in pollAnswers[1]):
				if (count.option_ids[0] == 0):
					pollAnswers[0].append(count.user.id)
				elif (count.option_ids[0] == 1):
					pollAnswers[1].append(count.user.id)
		else:
			if (count.user.id in pollAnswers[0]):
				pollAnswers[0].remove(count.user.id)
			elif (count.user.id in pollAnswers[1]):
				pollAnswers[1].remove(count.user.id)
		if (len(pollAnswers[0]) >= 1):
			prosent = pollVoteCount / len(pollAnswers[0])
			if (prosent >= 0.7):
				bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id, time.time() + 3600, False)
				bot.reply_to(msg, "–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ç–∫–Ω—É—Ç –Ω–∞ 1 —á–∞—Å!")
				print(1, mutePoll.id)
				ot.stop_poll(msg.chat.id, mutePoll.id)
	"""
@bot.message_handler(commands=["stat"], func=is_my_message)
def stat(msg):

	result = KarmaUser.select(pw.fn.SUM(KarmaUser.karma).alias('total'))\
	.where(KarmaUser.chatid == msg.chat.id)

	bank=result.dicts()[0].get('total')
	
	

	bot.send_message(msg.chat.id,f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ <b>–•–∞–±–ß–∞—Ç–∞</b>\n\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {bot.get_chat_members_count(chat_id=msg.chat.id)}\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{msg.message_id}</b>\n–ë–∞–Ω–∫ –∫–∞—Ä–º—ã: {bank}\n\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: 19.04.2017', parse_mode="HTML")

def zamorozka(msg):
	usera = bot.get_chat_member(msg.chat.id, msg.from_user.id)
	if usera.status != 'creator':
		Limitation.create(
			timer=pw.SQL("current_timestamp"),
			userid=msg.from_user.id,
			chatid=msg.chat.id)
	
@bot.message_handler(commands=["–ø–∏","—Å–∏—Å–∏"], func=is_my_message)
def cock(msg):
	user = select_user(msg.from_user, msg.chat)

	
	if is_game_abuse(msg):
		return
	if user.is_freezed!=None:
		zamorozka(msg)

	if user.is_freezed:
		bot.reply_to(msg, "–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!")
	else:
		if user.karma > 25:
			
			cock = random.randint(3, 25)
			if cock < 15: user_rang = "üôÅ" 
			if 15 <= cock < 20: user_rang = "üòÉ"
			if 20 <= cock < 25: user_rang = "üòé"
			random_karma = random.choice(["-","+"])
			change_karma(msg.from_user, msg.chat, f"{random_karma}{cock}")
			if msg.text[1:3] == "–ø–∏":
				bot.reply_to(msg,f"–ú–æ–π –ø–∏—Å—é–Ω {random_karma}{cock}—Å–º {user_rang}", parse_mode="HTML")
			else:
				bot.reply_to(msg,f"–ú–æ–∏ —Å–∏—Å–∏ {random_karma}{cock}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞ {user_rang}", parse_mode="HTML")
		else:
			bot.delete_message(msg.chat.id, msg.message_id)

			
def commands(msg, text):
	if msg.reply_to_message:
		if msg.text.lower() == "/–ø—Ä–∏–≤–µ—Ç":
			bot.reply_to(msg.reply_to_message,f"‚úå <b>{msg.reply_to_message.from_user.first_name}</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ <b>–•–∞–±–ß–∞—Ç–µ</b>! –ü–æ –¥–æ–±—Ä–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.", parse_mode="HTML")
			return
		if msg.text.lower() == "/—Ñ–æ—Ç–æ":
			bot.reply_to(msg.reply_to_message,f"<b>{msg.reply_to_message.from_user.first_name}</b> –Ω–µ —Å–æ–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ –ª–∏ –≤—ã —Å–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç —Å–≤–æ—é —Ñ–æ—Ç–æ—á–∫—É, –Ω–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–∞—Å –ª–∏—Ü–µ–∑—Ä–µ—Ç—å üôÇ", parse_mode="HTML")
			return
		if msg.text.lower() == "/—Ñ—Å–±":
			bot.reply_to(msg.reply_to_message,f"<a href='https://telegra.ph/file/1a296399c86ac7a19777f.jpg'>üòé</a> <b>{msg.reply_to_message.from_user.first_name}</b> –∑–∞ –≤–∞–º–∏ —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏!", parse_mode="HTML")
			return
		if msg.text.lower() == "/love":
			bot.reply_to(msg.reply_to_message, "‚ù§ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ –•–∞–±–∞—Ä–æ–≤—Å–∫–µ: @love_khv", parse_mode="HTML")
			return
	
	if msg.text.lower() == "/–≥–æ—Ä–æ—Å–∫–æ–ø":
		a = datetime.datetime.today()
		bot.reply_to(msg, f"<a href='https://khabara.ru/horoscop.html?{a}'>üîØ</a>", parse_mode="HTML")
	        
	if msg.text.lower() == "/–ª–∏–º–∏—Ç":
		Limitation.delete().where(
			(Limitation.userid == msg.from_user.id) &
			(Limitation.chatid == msg.chat.id)).execute()
		change_karma(msg.from_user, msg.chat, -15)
		bot.reply_to(msg, "–õ–∏–º–∏—Ç —Å–Ω—è—Ç -15 –∫–∞—Ä–º—ã")
		return
		
	if msg.text.lower() == "/–∫—É–ø–∏—Ç—å":
		bot.reply_to(msg,f"–∫—É–ø–∏—Ç—å –∫–∞—Ä–º—É –º–æ–∂–Ω–æ –ø–æ <a href='https://khabara.ru/informer.html'>‚û°Ô∏è —Å—Å—ã–ª–∫–µ</a> +1 –∫–∞—Ä–º—ã = 1 —Ä.", parse_mode="HTML")
		return
	if msg.text.lower() == "/–∫–æ—Ç":
		a = datetime.datetime.today()
		bot.send_photo(msg.chat.id, f"http://thecatapi.com/api/images/get?{a}", caption = f"–•–∞–±–ß–∞—Ç üêà –∫–æ—Ç–∏–∫")
		return
	if msg.text.lower() == "/–¥–∞—Ç–∞":
		a=datetime.datetime.today()+datetime.timedelta(hours=58)
		t = a.strftime("%Y%m%d")
		bot.send_photo(msg.chat.id, f"https://www.calend.ru/img/export/informer_names.png?{t}?{datetime.datetime.today()}", caption = f"–•–∞–±–ß–∞—Ç üí¨ –µ—Å—Ç—å –Ω–µ–ø–ª–æ—Ö–∏–µ –ø–æ–≤–æ–¥—ã...")
		return
		
	if msg.text.lower() == "/qr":
		bot.send_photo(msg.chat.id, f"https://telegra.ph/file/9a1bc1986d13b024657c8.jpg", caption = f"QR-–∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –•–∞–±–ß–∞—Ç–æ–º")
		return
		
	if msg.text.lower() == "/—É—Ç—Ä–∞":
		bot.reply_to(msg, f"–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, –•–∞–±–∞—Ä–æ–≤—Å–∫! ‚òÄÔ∏è –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!!!", parse_mode="HTML")
		return
	if msg.text.lower() == "/—à—É—Ç–∫–∞":
		bot.reply_to(msg, f"ü§™ {getanekdot()}", parse_mode="HTML")
		return
	if msg.text.lower() == "/—Ü–∏—Ç–∞—Ç–∞":
		url = 'http://api.forismatic.com/api/1.0/'
		payload  = {'method': 'getQuote', 'format': 'json', 'lang': 'ru'}
		res = requests.get(url, params=payload)
		data = res.json()
		quote = data['quoteText']
		author = data['quoteAuthor']
		bot.reply_to(msg, f"üìç <i>{quote}</i> ¬©Ô∏è <b>{author}</b>", parse_mode="HTML")
		return
		
	seves = saves_database.get(database)
	if msg.text.lower() == seves:
		if saves_database.get(database_vopros)=="slovo":
			saves_database[database_vopros] = "victorina"
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
			except:
				print("error")
			msg_id = bot.reply_to(msg,f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{seves}</b> +5 –∫–∞—Ä–º—ã\n –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–ª–æ–≤–æ /slovo", parse_mode="HTML").message_id
			saves_database[message_id_del2] =msg_id
			change_karma(msg.from_user, msg.chat, 5)
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
			except:
				print("error")
			return
		if saves_database.get(database_vopros)=="croco":
		
			seves_id = saves_database.get(database_id)
			seves_id_mute = saves_database.get(msg.from_user.id)
			seves_id_time = saves_database.get(msg.from_user.id+1)
			if seves_id_mute == 1:
				a=datetime.datetime.today() 
				b= seves_id_time+datetime.timedelta(minutes=15)
				if a < b:
					saves_database[msg.from_user.id]=0
					bot.restrict_chat_member(msg.chat.id, msg.from_user.id, until_date=time.time()+300)
					bot.delete_message(msg.chat.id, msg.message_id)
					bot.send_message(msg.chat.id,f'üò∂ <b>{msg.from_user.first_name}</b> –û–≥—Ä–∞–Ω–∏—á–µ–Ω(–∞) –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–µ.', parse_mode="HTML")
					change_karma(msg.from_user, msg.chat, -10)
				else:
					saves_database[msg.from_user.id]=0
				return
			if seves_id == msg.from_user.id:
				bot.reply_to(msg,f"–ú—É—Ö–ª–µ–≤–∞—Ç—å –Ω–µ –∫—Ä–∞—Å–∏–≤–æ: -10 –∫–∞—Ä–º—ã üí©", parse_mode="HTML")
				bot.delete_message(msg.chat.id, msg.message_id)
				change_karma(msg.from_user, msg.chat, -10)
				return
	
			saves_database[database] = "crocodila"
			saves_database[database_id]=0
			saves_database[msg.from_user.id]=1
			saves_database[msg.from_user.id+1]=datetime.datetime.today()
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
			except:
				print("error")
			msg_id = bot.reply_to(msg,f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{seves}</b> +10 –∫–∞—Ä–º—ã\n –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É /croco", parse_mode="HTML").message_id
			saves_database[message_id_del2] =msg_id
			change_karma(msg.from_user, msg.chat, 10)
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
			except:
				print("error")
			return

		if saves_database.get(database_vopros)=="mine":
			saves_database[database_vopros] = "victorina"
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
			except:
				print("error")
			msg_id = bot.reply_to(msg,f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–ª: +20 –∫–∞—Ä–º—ã\n –ó–∞–ø—É—Å—Ç–∏—Ç—å –ú–∞–π–Ω–µ—Ä /mine", parse_mode="HTML").message_id
			saves_database[message_id_del2] =msg_id
			change_karma(msg.from_user, msg.chat, 20)
			try:
				bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
			except:
				print("error")
			return

@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
	

		
	if  call.data == "–°–ª–æ–≤–æ":
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text=f"–ù—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤.")
		
	change_croco = saves_database.get(change_croco_2)
	seves_time = saves_database.get(database_time)
	idmy =seves_time+call.from_user.id
	idmy2=idmy+1
	idmy3=idmy+3
	
		
	if  f"{idmy}" == f"{call.data}":
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text=f"–ó–∞–¥—É–º–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {saves_database[database]}")
		
	if  call.data == "–°–ø—Ä–∞–≤–∫–∞":
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text="–ü—Ä–∞–≤–∏–ª–∞: üëÄ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ üîÅ - —Å–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ üêä - –∑–∞–≥–∞–¥–∞—Ç—å —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –æ—Ç–≥–∞–¥–∞–ª –∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç.")

	if f"{idmy3}" == f"{call.data}":
		if change_croco<1:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="üêä –ú–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 2-—É—Ö —Ä–∞–∑ üö´")
			return
		
		saves_database[change_croco_2]=change_croco-1
		saves_database[database] = random.choice(config.kroko_emoji)
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text=f"–ó–∞–¥—É–º–∞–Ω–Ω–æ–µ –≠–º–æ–¥–∑–∏: {saves_database[database]}")
		bot.send_message(call.message.chat.id, f"üêä {call.from_user.first_name} –∑–∞–≥–∞–¥–∞–ª <b>–≠–º–æ–¥–∑–∏</b>", parse_mode="HTML")
		
	if f"{idmy2}" == f"{call.data}":
		if change_croco<1:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="üêä –ú–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 2-—É—Ö —Ä–∞–∑ üö´")
			return
		saves_database[change_croco_2]=change_croco-1
		saves_database[database] = random.choice(config.kroko_words)
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text=f"–ó–∞–¥—É–º–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {saves_database[database]}")
		bot.send_message(call.message.chat.id, f"üêä {call.from_user.first_name} —Å–º–µ–Ω–∏–ª —Å–ª–æ–≤–æ -5 –∫–∞—Ä–º—ã", parse_mode="HTML")
		change_karma(call.from_user, call.message.chat, -5)
		
	if  f"{idmy2}" != f"{call.data}":
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True,  text=f"–°–ª–æ–≤–æ –∑–Ω–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∫—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∏–≥—Ä—É.")

	if  call.data == 1:
		bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí•", reply_markup=keyboard)
		bot.send_message(call.message.chat.id, f"üí• {call.from_user.first_name} –ø–æ–¥–æ—Ä–≤–∞–ª—Å—è -5, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å /bomb", parse_mode="HTML")
		change_karma(call.from_user, call.message.chat, -5)
	if  call.data == 2:
		bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí£", reply_markup=keyboard)
		bot.send_message(call.message.chat.id, f"üéâ {call.from_user.first_name} –æ–±–µ–∑–≤—Ä–µ–¥–∏–ª –±–æ–º–±—É +5, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å /bomb", parse_mode="HTML")
		change_karma(call.from_user, call.message.chat, 5)
	else:
		bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, text=" ", reply_markup=keyboard)
		
		
@bot.message_handler(commands=["croco", "–∫—Ä–æ–∫–æ–¥–∏–ª"], func=is_my_message)
def croco(msg):
	saves_database[database_vopros] = "croco"
	if saves_database.get(database_id) ==  msg.from_user.id:
		bot.send_message(msg.chat.id,f'üêä {msg.from_user.first_name} —É–∂–µ –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ.', parse_mode="HTML")
		bot.delete_message(msg.chat.id, msg.message_id)
		return
	else:
		try:
			bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
		except:
			print("error")
		
	if saves_database.get(msg.from_user.id) ==  1:
		saves_database[msg.from_user.id]=0
	a=random.randint(1,1000)
	idmy =a+msg.from_user.id
	idmy2 =idmy+1
	idmy3=idmy+3
	saves_database[database_time] =a
	saves_database[change_croco_2] =2
	saves_database[database_id] =msg.from_user.id
	
	saves_database[database] = random.choice(config.kroko_words)
	
	markup = telebot.types.InlineKeyboardMarkup()
	button = telebot.types.InlineKeyboardButton(text='üëÄ', callback_data=idmy)
	button3 = telebot.types.InlineKeyboardButton(text='üêä', callback_data=idmy3)
	button2 = telebot.types.InlineKeyboardButton(text='üîÑ', callback_data=idmy2)
	button4 = telebot.types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞', callback_data="–°–ø—Ä–∞–≤–∫–∞")
	markup.add(button,button2,button3,button4)
	msg_id = bot.send_message(chat_id=msg.chat.id, text=f'üêä {msg.from_user.first_name} –∑–∞–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ –≤ –∏–≥—Ä–µ –ö—Ä–æ–∫–æ–¥–∏–ª.', reply_markup=markup).message_id
	saves_database[message_id_del] =msg_id
	bot.delete_message(msg.chat.id, msg.message_id)
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
	except:
		print("error")
		
		
@bot.message_handler(commands=["slovo"], func=is_my_message)
def slovo(msg):
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
	except:
		print("error")
	if len(msg.text.split()) == 1:
		n=1
	else:
		n = int(msg.text.split()[1])
	word = random.choice(config.kroko_words)
	saves_database[database] = word
	
	word=[word[i:i+n] for i in range(0, len(word), n)]

	str_var = list(word)
	random.shuffle(str_var)
	abrakadabra= '  '.join(str_var)
	
	saves_database[database_vopros] = "slovo"
	saves_database[database_id]=0
	markup = telebot.types.InlineKeyboardMarkup()
	button = telebot.types.InlineKeyboardButton(text=f'–°–ø—Ä–∞–≤–∫–∞', callback_data="–°–ª–æ–≤–æ")
	markup.add(button)
	msg_id = bot.send_message(chat_id=msg.chat.id, text=f'‚ÅâÔ∏è –°–æ—Å—Ç–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤:\n\n{abrakadabra}', reply_markup=markup).message_id
	saves_database[message_id_del] =msg_id
	bot.delete_message(msg.chat.id, msg.message_id)
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
	except:
		print("error")
		

@bot.message_handler(commands=["bomb"], func=is_my_message)
def bomb(msg):
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
	except:
		print("error")

	if len(msg.text.split()) == 1:
		n=9
	else:
		n = int(msg.text.split()[1])
	miner=random.sample(range(n), n)
	
	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.row_width = 3

	for i in n:
		keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚Ä¢', callback_data=miner[i]))
	msg_id = bot.send_message(chat_id=msg.chat.id, text=f'–†–∞–∑–º–∏–Ω–∏—Ä—É–π—Ç–µ –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ', reply_markup=keyboard).message_id
	saves_database[message_id_del] =msg_id
	bot.delete_message(msg.chat.id, msg.message_id)
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
	except:
		print("error")
		
		
@bot.message_handler(commands=["mine"], func=is_my_message)
def mine(msg):
	if is_game_abuse(msg):
		return
	user = select_user(msg.from_user, msg.chat)

	if user.is_freezed!=None:
		zamorozka(msg)
		
	if user.is_freezed:
		bot.reply_to(msg, f"–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!", parse_mode="HTML")
		return
		
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del))
	except:
		print("error")
		


	x=random.choice(string.ascii_lowercase)
	word=ord(x)
	saves_database[database] = f"{word}"
	saves_database[database_vopros] = "mine"
	saves_database[database_id]=0
	msg_id = bot.send_photo(msg.chat.id, f"https://telegra.ph/file/5c67b8eb309098ca0514f.jpg", caption = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ <a href='https://khabara.ru/tg/{x}-karma.html'>üí∞ –ü–æ —Å—Å—ã–ª–∫–µ</a> –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –≤ —á–∞—Ç.", parse_mode="HTML").message_id
	

	
	saves_database[message_id_del] =msg_id
	bot.delete_message(msg.chat.id, msg.message_id)
	try:
		bot.delete_message(msg.chat.id, saves_database.get(message_id_del2))
	except:
		print("error")
		
	
	
def getanekdot():
	z=''
	s=requests.get('http://anekdotme.ru/random')
	b=bs4.BeautifulSoup(s.text, "html.parser")
	p=b.select('.anekdot_text')
	for x in p:        
		s=(x.getText().strip())
		z=z+s+'\n\n'
	return s
	
@bot.message_handler(commands=["save","—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"], func=is_my_message)
def save(msg):
		
	bot.forward_message(-1001338159710, msg.chat.id, msg.reply_to_message.message_id)
	bot.reply_to(msg.reply_to_message,f"‚ÅâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ <a href='https://t.me/joinchat/T8KyXgxSk1o4s7Hk'>–¶–∏—Ç–∞—Ç–Ω–∏–∫ –•–∞–±–ß–∞—Ç–∞</a>.", parse_mode="HTML")
	
@bot.message_handler(commands=["–≤–æ–ø—Ä–æ—Å"], func=is_my_message)
def khvtrip(msg):
	user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
	if user.status == 'creator':
		bot.send_message(-1001310162579,f'‚ÅâÔ∏è {msg.reply_to_message.text}', parse_mode="HTML")
		bot.reply_to(msg.reply_to_message,f"‚ÅâÔ∏è –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω <a href='https://t.me/khvtrip'>–ó–Ω–∞—Ç–æ–∫–∞–º –•–∞–±–∞—Ä–æ–≤—Å–∫–∞</a>", parse_mode="HTML")
	else:
		bot.reply_to(msg.reply_to_message,f"<a href='tg://user?id=55910350'>Ô∏è‚Åâ</a> –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –•–∞–±–∞—Ä–æ–≤—Å–∫: @khvtrip", parse_mode="HTML")
	
@bot.message_handler(commands=["?"], func=is_my_message)
def q(msg):
	if len(msg.text.split()) == 1:
		bot.delete_message(msg.chat.id, msg.message_id)
		return
	random_karma = ("–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ!","–î–∞.","–ù–µ—Ç.","–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç.","–ù–µ —É–≤–µ—Ä–µ–Ω...","–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–µ—Ç!","–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ñ–∞–Ω–∞—Ç –∞–Ω–∏–º–µ, —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!","–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.","–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.","–ê –∫–∞–∫ –∂–µ –∏–Ω–∞—á–µ?.","–î–∞, –Ω–æ –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç—ã –Ω–µ —Å–º–æ—Ç—Ä–∏—à—å –∞–Ω–∏–º–µ.","–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞.","–ù–µ –∑–Ω–∞—é.","–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç.","–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.","–ù–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.")
	bot.reply_to(msg, f"üîÆ {random.choice(random_karma)}", parse_mode="HTML")
	  
def reputation(msg, text):
	""" TODO """

	# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ, —Ç–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		
	if len(text) > 100:
		return

	if set(['üî´','üî™','ü™ì','üß®','üí£','‚öîÔ∏è','üó°','ü•ä','üèπ','ü¶æ','‚úä','üëä','ü§õ','ü§ú','üí™','‚ò†']) & set(text):
		duel(msg)
		return
		
	if set(['üéÅ','üåπ','‚ù§']) & set(text):
		gift_karma(msg)
		return

	# –ï—Å–ª–∏ –∫–∞—Ä–º—É –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å, —Ç–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
	how_much_changed = is_karma_changing(text)
	if not how_much_changed:
		return

	# –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
	if msg.from_user.id == msg.reply_to_message.from_user.id:
		bot.send_message(msg.chat.id, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ.")
		return

	# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
	if is_karma_abuse(msg):
		return

	if is_karma_freezed(msg):
		return
	if msg.reply_to_message.from_user.is_bot:
		return
	# –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã –≤—Å–µ –∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: –∏–∑–º–µ–Ω—è–µ–º
	result = sum(how_much_changed)
	if result != 0:
		zamorozka(msg)
		change_karma(msg.reply_to_message.from_user, msg.chat, result)

	if result > 0:
		res = "–ø–æ–≤—ã—à–µ–Ω–∞ ‚¨ÜÔ∏è"
	elif result < 0:
		res = "–ø–æ–Ω–∏–∂–µ–Ω–∞ ‚¨áÔ∏è"
	else:
		res = "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞"

	user = KarmaUser.select().where(
		(KarmaUser.userid == msg.reply_to_message.from_user.id) &
		(KarmaUser.chatid == msg.chat.id)).get()

	if not user.user_name.isspace():
		name = user.user_name.strip()
	else:
		name = user.user_nick.strip()
		

	now_karma = f"–ö–∞—Ä–º–∞ {res}\n{name}: <b>{user.karma}</b>"
	bot.send_message(msg.chat.id, now_karma, parse_mode="HTML")

def reputation_mat(msg, text):
	""" TODO –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –º–∞—Ç—ã"""
	
	how_much_changed = is_karma_changing_mat(text)
	if not how_much_changed:
		return
	user = select_user(msg.from_user, msg.chat)
	if user.is_freezed==None:
		change_karma(msg.from_user, msg.chat, 0)
		return
	# –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã –≤—Å–µ –∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: –∏–∑–º–µ–Ω—è–µ–º
	result = sum(how_much_changed)
	change_karma(msg.from_user, msg.chat, result)
		

@bot.message_handler(content_types=["text"], func=reply_exist)
def handler_karma_text(msg):
	if msg.chat.type == "private":
		return
	reputation(msg, msg.text)
	reputation_mat(msg, msg.text)
	commands(msg, msg.text)
	
@bot.message_handler(content_types=['text'])	
def handler_karma(msg):
	if msg.chat.type == "private":
		return
	reputation_mat(msg, msg.text)
	commands(msg, msg.text)

@bot.message_handler(content_types=["sticker"], func=reply_exist)
def handler_karma_sticker(msg):
	if msg.chat.type == "private":
		return
	reputation(msg, msg.sticker.emoji)
	
@bot.channel_post_handler(content_types=["text",'photo','video'])
def channel_post(msg):
	if msg.caption !=None:
		if '‚úâÔ∏è' in msg.caption or '‚û°Ô∏è' in msg.caption:
			bot.forward_message(-1001110839896, msg.chat.id, msg.message_id)
			return
	else:
		if '‚úâÔ∏è' in msg.text or '‚û°Ô∏è' in msg.text:
			bot.forward_message(-1001110839896, msg.chat.id, msg.message_id)
				
@bot.message_handler(content_types=['dice'])
def send_dice(msg):
	if msg.chat.type == "private":
		return
	if msg.forward_from :
		bot.delete_message(msg.chat.id, msg.message_id)
	else:
		try:
			user = select_user(msg.from_user, msg.chat)
			if not user:
				insert_user(msg.from_user, msg.chat)
				bot.delete_message(msg.chat.id, msg.message_id)
		except Exception:
			insert_user(msg.from_user, msg.chat)
			bot.delete_message(msg.chat.id, msg.message_id)
			
		user = select_user(msg.from_user, msg.chat)
		if is_game_abuse(msg):
			return
		if user.is_freezed!=None:
			zamorozka(msg)
			
		if user.is_freezed:
			bot.reply_to(msg, "–†–∞–∑–º–æ—Ä–æ–∑—å—Ç–µ –∫–∞—Ä–º—É —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!")
			return

		else:
			if user.karma > msg.dice.value:
				
				random_karma = random.choice(["-","+"])
				bot.reply_to(msg, f"–°—ã–≥—Ä–∞–ª –≤ –∫–∞—Ä–º—É {random_karma}{msg.dice.value}", parse_mode="HTML")
				user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
				if user.status == 'creator':
					change_karma(msg.from_user, msg.chat, f"+{msg.dice.value}")
				else:
					change_karma(msg.from_user, msg.chat, f"{random_karma}{msg.dice.value}")
			else:
				bot.delete_message(msg.chat.id, msg.message_id)
				

# bot.polling(none_stop=True)


# –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
server = Flask(__name__)


@server.route("/bot", methods=['POST'])
def get_message():
	""" TODO """
	decode_json = request.stream.read().decode("utf-8")
	bot.process_new_updates([telebot.types.Update.de_json(decode_json)])
	return "!", 200


@server.route("/")
def webhook_add():
	""" TODO """
	bot.remove_webhook()
	bot.set_webhook(url=config.url)
	return "!", 200

@server.route("/<password>")
def webhook_rem(password):
	""" TODO """
	password_hash = hashlib.md5(bytes(password, encoding="utf-8")).hexdigest()
	if password_hash == "5b4ae01462b2930e129e31636e2fdb68":
		bot.remove_webhook()
		return "Webhook removed", 200
	else:
		return "Invalid password", 200


server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
