#!usr/bin/python3
import datetime
import hashlib
import string
import os
import random
import requests
import json
import re
from flask import Flask, request
import telebot
from telebot import types
import config

TELEGRAM_API = os.environ["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_API)
	

@bot.message_handler(commands=["start"])
def start(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""
	reply_text = (
			"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ " +
			" –ø–æ–¥—Å—á–µ—Ç –∫–∞—Ä–º—ã –≤ —á–∞—Ç–µ @khvchat.")
	bot.send_message(msg.chat.id, reply_text)

def weather_key(text):
    weather = types.InlineKeyboardMarkup()
    weather.add(
        types.InlineKeyboardButton(text=text, callback_data='weather_now'))
    return weather
    
@bot.message_handler(commands=['123'])
def handle_docs_photo(message):
    bot.send_message(message.chat.id, '—Ç–µ–∫—Å—Ç –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π', reply_markup=weather_func('lalala'))

@bot.callback_query_handler(func=lambda call: True)
def handler_call(call):
    if call.data == 'weather_now':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=get_weather_now(),
            reply_markup=weather_func('blala'),
            parse_mode='Markdown')

'''
@bot.message_handler(commands=["bo"])
def keyboard(msg):
	if len(msg.text.split()) == 1:
		n=10
	else:
		n = int(msg.text.split()[1])
		
	nums=list(range(1, n))
	random.shuffle(nums)
	keyboard = telebot.types.InlineKeyboardMarkup()
	button_list = [telebot.types.InlineKeyboardButton(text='‚Ä¢', callback_data=x) for x in nums]
	keyboard.add(*button_list)
	bot.send_message(chat_id=msg.chat.id, text='–†–∞–∑–º–∏–Ω–∏—Ä—É–π—Ç–µ –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ',reply_markup=keyboard)
		
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
	if call.message:
		if  call.data == "1":
			keyboard=[[InlineKeyboardButton('Happy 1',callback_data='1')],[InlineKeyboardButton('Happy 2',callback_data='2')],[InlineKeyboardButton('Happy 3',callback_data='3')]]
			
			reply_markup=InlineKeyboardMarkup(keyboard)
			bot.editMessageText(chat_id=call.message.chat_id,message_id=call.message.message_id,reply_markup=reply_markup)
          
			

			bot.send_message(call.message.chat.id, f"üéâ 1 {call.from_user.first_name} –æ–±–µ–∑–≤—Ä–µ–¥–∏–ª –±–æ–º–±—É +5, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å /bomb", parse_mode="HTML")
			bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—ã—â—å1", reply_markup=keyboard)
			

			return
		if  call.data == "2":
			bot.send_message(call.message.chat.id, f"üéâ 2 {call.from_user.first_name} –æ–±–µ–∑–≤—Ä–µ–¥–∏–ª –±–æ–º–±—É +5, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å /bomb", parse_mode="HTML")
			bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—ã—â—å2", reply_markup=keyboard)
			return
		else:
			bot.send_message(call.message.chat.id, f"üéâ 3 {call.from_user.first_name} –æ–±–µ–∑–≤—Ä–µ–¥–∏–ª –±–æ–º–±—É +5, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å /bomb", parse_mode="HTML")
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—ã—â—å3", reply_markup=keyboard)
			return
'''
# –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
server = Flask(__name__)


@server.route("/bot", methods=['POST'])
def get_message():
	""" TODO """
	decode_json = request.stream.read().decode("utf-8")
	bot.process_new_updates([telebot.types.Update.de_json(decode_json)])
	return "!", 200


@server.route("/")
def webhook_add():
	""" TODO """
	bot.remove_webhook()
	bot.set_webhook(url=config.url)
	return "!", 200

@server.route("/<password>")
def webhook_rem(password):
	""" TODO """
	password_hash = hashlib.md5(bytes(password, encoding="utf-8")).hexdigest()
	if password_hash == "5b4ae01462b2930e129e31636e2fdb68":
		bot.remove_webhook()
		return "Webhook removed", 200
	else:
		return "Invalid password", 200


server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
